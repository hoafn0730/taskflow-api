import { StatusCodes } from 'http-status-codes';

// eslint-disable-next-line no-unused-vars
export const errorHandlingMiddleware = (err, req, res, next) => {
    if (!err.statusCode) err.statusCode = StatusCodes.INTERNAL_SERVER_ERROR;

    const responseError = {
        statusCode: err.statusCode,
        message: err.message || StatusCodes[err.statusCode], // N·∫øu l·ªói m√† kh√¥ng c√≥ message th√¨ l·∫•y ReasonPhrases chu·∫©n theo m√£ Status Code
        stack: err.stack,
    };

    // Ch·ªâ khi m√¥i tr∆∞·ªùng l√† DEV th√¨ m·ªõi tr·∫£ v·ªÅ Stack Trace ƒë·ªÉ debug d·ªÖ d√†ng h∆°n, c√≤n kh√¥ng th√¨ x√≥a ƒëi.
    if (process.env.BUILD_MODE !== 'dev') delete responseError.stack;

    // ƒêo·∫°n n√†y c√≥ th·ªÉ m·ªü r·ªông nhi·ªÅu v·ªÅ sau nh∆∞ ghi Error Log v√†o file, b·∫Øn th√¥ng b√°o l·ªói v√†o group Slack, Telegram, Email...vv Ho·∫∑c c√≥ th·ªÉ vi·∫øt ri√™ng Code ra m·ªôt file Middleware kh√°c t√πy d·ª± √°n.
    // ...

    // eslint-disable-next-line no-console
    console.log('üöÄ ~ errorHandlingMiddleware ~ responseError:', responseError);

    // Tr·∫£ responseError v·ªÅ ph√≠a Front-end
    return res.status(responseError.statusCode).json(responseError);
};
